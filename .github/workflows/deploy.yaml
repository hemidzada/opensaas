name: Deploy OpenSaaS to Coolify

on:
  push:
    branches:
      - main

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    
    # --- GEÇİCİ VERİTABANI SERVİSİNİ BAŞLATIYORUZ ---
    # Bu, SADECE kurulum sırasında "migrations" dosyalarını oluşturmak içindir.
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: root # Wasp'ın beklediği kullanıcı adı
          POSTGRES_PASSWORD: password
          POSTGRES_DB: db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js v22
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # --- 1. Projeyi Derle ve Veritabanı Dosyalarını Oluştur ---
      - name: Install, Build, and Create Migrations
        env:
          # Geçici veritabanına doğru kullanıcıyla bağlanıyoruz
          DATABASE_URL: postgresql://root:password@localhost:5432/db
        run: |
          cd ./template/app
          npm install
          curl -sSL https://get.wasp-lang.dev/installer.sh | sh
          
          # Bu komut "migrations" klasörünü oluşturacak/güncelleyecek
          echo "init" | /home/runner/.local/bin/wasp db migrate-dev
          
          # Projeyi derliyoruz
          /home/runner/.local/bin/wasp build
          
          # İstemciyi production için hazırlıyoruz
          echo "Building client for production..."
          cd ./.wasp/build/web-app
          REACT_APP_API_URL=https://api.vidhub.ai npm run build

      # --- 2. Sunucu Dockerfile'ını Düzelt ve İmajı Oluştur ---
      - name: Fix Dockerfile, Build and Push Server Image
        run: |
          # Dockerfile'a, oluşturduğumuz "migrations" klasörünü kopyalamasını söylüyoruz.
          sed -i '/COPY db \.\/db/a COPY migrations .\/migrations' ./template/app/.wasp/build/Dockerfile
          
          # Sunucu imajını oluşturup yüklüyoruz
          docker buildx build \
            --file ./template/app/.wasp/build/Dockerfile \
            --tag ghcr.io/hemidzada/opensaas-server:main \
            --push ./template/app
            
      # --- 3. İstemci (Client) İmajını Oluştur ve Yükle ---
      - name: Build and Push Client Image
        run: |
          cat > Dockerfile.client <<EOF
          FROM pierrezemb/gostatic
          CMD ["-fallback", "index.html"]
          COPY ./build /srv/http
          EOF

          docker buildx build \
            --file ./Dockerfile.client \
            --tag ghcr.io/hemidzada/opensaas-client:main \
            --push ./template/app/.wasp/build/web-app
      
      # --- 4. Coolify'i Tetikle ---
      - name: Trigger Coolify Deploys
        run: |
          curl -X POST ${{ secrets.SERVER_COOLIFY_WEBHOOK }}
          curl -X POST ${{ secrets.CLIENT_COOLIFY_WEBHOOK }}
