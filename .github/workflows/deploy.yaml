name: Deploy OpenSaaS to Coolify
on:
  push:
    branches:
      - main
jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: opensaas
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Set up Node.js v22
        uses: actions/setup-node@v4
        with:
          node-version: '22'
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Wait for PostgreSQL
        run: |
          sudo apt-get update && sudo apt-get install -y postgresql-client
          until pg_isready -h localhost -p 5432 -U postgres; do
            echo "Waiting for postgres..."
            sleep 2
          done
      
      - name: Install Dependencies and Build Wasp Project
        env:
          DATABASE_URL: postgresql://postgres:password@localhost:5432/opensaas
        run: |
          cd ./template/app
          npm install
          curl -sSL https://get.wasp-lang.dev/installer.sh | sh
          
          # Migration dosyalarını oluştur (sadece dosya, DB'ye uygulamadan)
          /home/runner/.local/bin/wasp db migrate-dev --name init --create-only || echo "Migration already exists"
          
          # Wasp projesini derle
          /home/runner/.local/bin/wasp build
      
      - name: Build Client for Production
        run: |
          cd ./template/app/.wasp/build/web-app
          REACT_APP_API_URL=https://api.vidhub.ai npm run build
      
      - name: Prepare Migrations for Docker
        run: |
          # Migration dosyalarını .wasp/build içine kopyala
          if [ -d "./template/app/migrations" ]; then
            cp -r ./template/app/migrations ./template/app/.wasp/build/migrations
            echo "Migrations copied successfully"
          else
            echo "No migrations folder found!"
            exit 1
          fi
      
      - name: Modify Server Dockerfile
        run: |
          cd ./template/app/.wasp/build
          
          # Dockerfile'ı düzenle - migrations'ı kopyala ve deploy et
          # CMD satırından ÖNCE migration deployment ekle
          sed -i '/CMD \["npm", "run", "start-production"\]/i \
COPY --chown=node:node migrations ./migrations\n\
RUN npx prisma migrate deploy --schema=../db/schema.prisma' ./Dockerfile
          
          echo "Modified Dockerfile:"
          cat ./Dockerfile
      
      - name: Build and Push Server Image
        run: |
          cd ./template/app/.wasp/build
          docker buildx build \
            --platform linux/amd64 \
            --tag ghcr.io/hemidzada/opensaas-server:main \
            --push \
            .
      
      - name: Build and Push Client Image
        run: |
          cat > Dockerfile.client <<EOF
          FROM pierrezemb/gostatic
          CMD ["-fallback", "index.html"]
          COPY ./build /srv/http
          EOF
          
          docker buildx build \
            --platform linux/amd64 \
            --file ./Dockerfile.client \
            --tag ghcr.io/hemidzada/opensaas-client:main \
            --push \
            ./template/app/.wasp/build/web-app
      
      - name: Trigger Coolify Deploys
        run: |
          curl -X POST ${{ secrets.SERVER_COOLIFY_WEBHOOK }}
          sleep 5
          curl -X POST ${{ secrets.CLIENT_COOLIFY_WEBHOOK }}
